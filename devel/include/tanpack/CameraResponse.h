// Generated by gencpp from file tanpack/CameraResponse.msg
// DO NOT EDIT!


#ifndef TANPACK_MESSAGE_CAMERARESPONSE_H
#define TANPACK_MESSAGE_CAMERARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tanpack
{
template <class ContainerAllocator>
struct CameraResponse_
{
  typedef CameraResponse_<ContainerAllocator> Type;

  CameraResponse_()
    : height(0)
    , width(0)
    , step(0)
    , encoding()
    , is_bigendian(0)
    , data()  {
    }
  CameraResponse_(const ContainerAllocator& _alloc)
    : height(0)
    , width(0)
    , step(0)
    , encoding(_alloc)
    , is_bigendian(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _height_type;
  _height_type height;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _step_type;
  _step_type step;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _encoding_type;
  _encoding_type encoding;

   typedef uint8_t _is_bigendian_type;
  _is_bigendian_type is_bigendian;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::tanpack::CameraResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tanpack::CameraResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CameraResponse_

typedef ::tanpack::CameraResponse_<std::allocator<void> > CameraResponse;

typedef boost::shared_ptr< ::tanpack::CameraResponse > CameraResponsePtr;
typedef boost::shared_ptr< ::tanpack::CameraResponse const> CameraResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tanpack::CameraResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tanpack::CameraResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tanpack::CameraResponse_<ContainerAllocator1> & lhs, const ::tanpack::CameraResponse_<ContainerAllocator2> & rhs)
{
  return lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.step == rhs.step &&
    lhs.encoding == rhs.encoding &&
    lhs.is_bigendian == rhs.is_bigendian &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tanpack::CameraResponse_<ContainerAllocator1> & lhs, const ::tanpack::CameraResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tanpack

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tanpack::CameraResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tanpack::CameraResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tanpack::CameraResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tanpack::CameraResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tanpack::CameraResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tanpack::CameraResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tanpack::CameraResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8c7a5d1cecba3ff861f52d5345675c3";
  }

  static const char* value(const ::tanpack::CameraResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8c7a5d1cecba3ffULL;
  static const uint64_t static_value2 = 0x861f52d5345675c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::tanpack::CameraResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tanpack/CameraResponse";
  }

  static const char* value(const ::tanpack::CameraResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tanpack::CameraResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 height  \n"
"uint32 width\n"
"uint32 step\n"
"string encoding\n"
"uint8 is_bigendian\n"
"uint8[] data\n"
"\n"
;
  }

  static const char* value(const ::tanpack::CameraResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tanpack::CameraResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.step);
      stream.next(m.encoding);
      stream.next(m.is_bigendian);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CameraResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tanpack::CameraResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tanpack::CameraResponse_<ContainerAllocator>& v)
  {
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.step);
    s << indent << "encoding: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.encoding);
    s << indent << "is_bigendian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_bigendian);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TANPACK_MESSAGE_CAMERARESPONSE_H
