// Generated by gencpp from file tanpack/BatteryResponse.msg
// DO NOT EDIT!


#ifndef TANPACK_MESSAGE_BATTERYRESPONSE_H
#define TANPACK_MESSAGE_BATTERYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tanpack
{
template <class ContainerAllocator>
struct BatteryResponse_
{
  typedef BatteryResponse_<ContainerAllocator> Type;

  BatteryResponse_()
    : voltage(0.0)
    , current(0.0)
    , remaining(0.0)  {
    }
  BatteryResponse_(const ContainerAllocator& _alloc)
    : voltage(0.0)
    , current(0.0)
    , remaining(0.0)  {
  (void)_alloc;
    }



   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef float _remaining_type;
  _remaining_type remaining;





  typedef boost::shared_ptr< ::tanpack::BatteryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tanpack::BatteryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryResponse_

typedef ::tanpack::BatteryResponse_<std::allocator<void> > BatteryResponse;

typedef boost::shared_ptr< ::tanpack::BatteryResponse > BatteryResponsePtr;
typedef boost::shared_ptr< ::tanpack::BatteryResponse const> BatteryResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tanpack::BatteryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tanpack::BatteryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tanpack::BatteryResponse_<ContainerAllocator1> & lhs, const ::tanpack::BatteryResponse_<ContainerAllocator2> & rhs)
{
  return lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.remaining == rhs.remaining;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tanpack::BatteryResponse_<ContainerAllocator1> & lhs, const ::tanpack::BatteryResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tanpack

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::tanpack::BatteryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tanpack::BatteryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tanpack::BatteryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tanpack::BatteryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tanpack::BatteryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tanpack::BatteryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tanpack::BatteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "df7f08c1443b38b4ac0bbc90dbc93e28";
  }

  static const char* value(const ::tanpack::BatteryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdf7f08c1443b38b4ULL;
  static const uint64_t static_value2 = 0xac0bbc90dbc93e28ULL;
};

template<class ContainerAllocator>
struct DataType< ::tanpack::BatteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tanpack/BatteryResponse";
  }

  static const char* value(const ::tanpack::BatteryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tanpack::BatteryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 voltage\n"
"float32 current\n"
"float32 remaining\n"
;
  }

  static const char* value(const ::tanpack::BatteryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tanpack::BatteryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.remaining);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tanpack::BatteryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tanpack::BatteryResponse_<ContainerAllocator>& v)
  {
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "remaining: ";
    Printer<float>::stream(s, indent + "  ", v.remaining);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TANPACK_MESSAGE_BATTERYRESPONSE_H
